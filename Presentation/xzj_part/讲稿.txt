As we know, the complexity of search algorithm is exponential, which means that the efficiency is closely related to the depth of the search. For example, in an undirected graph, the degree of each vertex is 5 and we want to find the path from S to T. Assume that the minimal distance from S to T is L, which means there are nearly 4^L nodes to be visited if we don't go backward. So The complexity of this algorithm is O(4^L).However, if we search from both S and T at the same time, each one just needs to visit those vertexes whose distance are L/2. And we put those vertexes into Set_S and Set_T. The size of both sets are 4^(L/2), and we just need to find the intersection of Set_S and Set_T, denoted by P. So the path from S to T is the union of the path from S to P and the path from P to T. The complexity is O(4^(L/2)).